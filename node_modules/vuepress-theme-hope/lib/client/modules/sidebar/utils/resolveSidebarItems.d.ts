import type { ResolvedSidebarGroupItem, ResolvedSidebarItem, ResolvedSidebarPageItem } from "./typings.js";
import type { SidebarArrayOptions, SidebarItem, SidebarObjectOptions, SidebarOptions } from "../../../../shared/index.js";
export interface ResolveArraySidebarOptions {
    config: SidebarArrayOptions;
    headerDepth: number;
    prefix?: string;
}
/**
 * Resolve sidebar item
 */
export declare const resolveSidebarItem: (item: SidebarItem, pathPrefix: string) => ResolvedSidebarPageItem | ResolvedSidebarGroupItem;
/**
 * Resolve sidebar items if the config is an array
 */
export declare const resolveArraySidebarItems: ({ config, prefix, }: ResolveArraySidebarOptions) => ResolvedSidebarItem[];
export interface ResolveMultiSidebarOptions {
    config: SidebarObjectOptions;
    routePath: string;
    headerDepth: number;
}
/**
 * Resolve sidebar items if the config is a key -> value (path-prefix -> array) object
 */
export declare const resolveMultiSidebarItems: ({ config, routePath, headerDepth, }: ResolveMultiSidebarOptions) => ResolvedSidebarItem[];
export interface ResolveSidebarOptions {
    config: SidebarOptions;
    headerDepth: number;
    routeLocale: string;
    routePath: string;
}
/**
 * Resolve sidebar items global computed
 *
 * It should only be resolved and provided once
 */
export declare const resolveSidebarItems: ({ config, headerDepth, routeLocale, routePath, }: ResolveSidebarOptions) => ResolvedSidebarItem[];
//# sourceMappingURL=resolveSidebarItems.d.ts.map